// Copyright (c) 2023 Mike Tsao. All rights reserved.

use ensnare_core::prelude::*;

/// An [Entity] is a generic musical instrument, which includes MIDI
/// instruments like synths, effects like reverb, and controllers like MIDI
/// sequencers. Almost everything in this system is an Entity of some kind. A
/// struct's implementation of these trait methods is usually generated by the
/// [IsEntity](ensnare_proc_macros::IsEntity) proc macro.
#[typetag::serde(tag = "type")]
pub trait Entity:
    HasMetadata
    + Controls
    + Controllable
    + Displays
    + Generates<StereoSample>
    + HandlesMidi
    + Serializable
    + TransformsAudio
    + std::fmt::Debug
    + Send
    + Sync
{
    fn as_handles_midi_mut(&mut self) -> Option<&mut dyn HandlesMidi> {
        None
    }
    fn as_transforms_audio_mut(&mut self) -> Option<&mut dyn TransformsAudio> {
        None
    }
    fn displays_in_timeline(&self) -> bool {
        false
    }
}
#[typetag::serde(tag = "type")]
pub trait EntityBounds: Entity {}

/// A [HasMetadata] has basic information about an [Entity]. Some methods apply
/// to the "class" of [Entity] (for example, all `ToyInstrument`s share the name
/// "ToyInstrument"), and others apply to each instance of a class (for example,
/// one ToyInstrument instance might be Uid 42, and another Uid 43).
pub trait HasMetadata {
    /// The [Uid] is a globally unique identifier for an instance of an
    /// [Entity].
    fn uid(&self) -> Uid;
    /// Assigns a [Uid].
    fn set_uid(&mut self, uid: Uid);
    /// A string that describes this class of [Entity]. Suitable for debugging
    /// or quick-and-dirty UIs.
    fn name(&self) -> &'static str;
    /// A kebab-case string that identifies this class of [Entity].
    fn key(&self) -> &'static str;
}

/// Something that can be called during egui rendering to display a view of
/// itself.
//
// Adapted from egui_demo_lib/src/demo/mod.rs
pub trait Displays {
    /// Renders this Entity. Returns a [Response](egui::Response).
    fn ui(&mut self, ui: &mut eframe::egui::Ui) -> eframe::egui::Response {
        ui.label("Coming soon!")
    }

    /// Indicates which section of the timeline is being displayed. Entities
    /// that don't render in the timeline can ignore this.
    #[allow(unused_variables)]
    fn set_view_range(&mut self, view_range: &ViewRange) {}
}
